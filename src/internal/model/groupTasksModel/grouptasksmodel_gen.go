// Code generated by goctl. DO NOT EDIT.

package groupTask

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupTasksFieldNames          = builder.RawFieldNames(&GroupTasks{})
	groupTasksRows                = strings.Join(groupTasksFieldNames, ",")
	groupTasksRowsExpectAutoSet   = strings.Join(stringx.Remove(groupTasksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupTasksRowsWithPlaceHolder = strings.Join(stringx.Remove(groupTasksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	groupTasksModel interface {
		Insert(ctx context.Context, data *GroupTasks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupTasks, error)
		Update(ctx context.Context, data *GroupTasks) error
		Delete(ctx context.Context, data *GroupTasks) error
		DeleteByGroupId(ctx context.Context, groupId int64) error
		DeleteByTaskId(ctx context.Context, taskId int64) error
		SelectTaskIds(ctx context.Context, groupId int64) ([]int64, error)
	}

	defaultGroupTasksModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupTasks struct {
		Id      int64 `db:"id"` // Primary Key
		GroupId int64 `db:"group_id"`
		TaskId  int64 `db:"task_id"`
	}
)

func newGroupTasksModel(conn sqlx.SqlConn) *defaultGroupTasksModel {
	return &defaultGroupTasksModel{
		conn:  conn,
		table: "`group_tasks`",
	}
}

func (m *defaultGroupTasksModel) Delete(ctx context.Context, data *GroupTasks) error {
	query := fmt.Sprintf("delete from %s where `group_id` = ? and `task_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.TaskId)
	return err
}

func (m *defaultGroupTasksModel) DeleteByGroupId(ctx context.Context, groupId int64) error {
	query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, groupId)
	return err
}

func (m *defaultGroupTasksModel) DeleteByTaskId(ctx context.Context, groupId int64) error {
	query := fmt.Sprintf("delete from %s where `task_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, groupId)
	return err
}

func (m *defaultGroupTasksModel) FindOne(ctx context.Context, id int64) (*GroupTasks, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupTasksRows, m.table)
	var resp GroupTasks
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupTasksModel) SelectTaskIds(ctx context.Context, groupId int64) ([]int64, error) {
	taskIdsQuery := fmt.Sprintf("select %s from %s where group_id = ?", groupTasksRows, m.table)
	tasks := make([]*GroupTasks, 0)
	taskErr := m.conn.QueryRowsCtx(ctx, &tasks, taskIdsQuery, groupId)
	switch taskErr {
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	}

	result := make([]int64, 0)
	for _, item := range tasks {
		result = append(result, item.TaskId)
	}
	return result, nil
}

func (m *defaultGroupTasksModel) Insert(ctx context.Context, data *GroupTasks) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, groupTasksRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.TaskId)
	return ret, err
}

func (m *defaultGroupTasksModel) Update(ctx context.Context, data *GroupTasks) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupTasksRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.TaskId, data.Id)
	return err
}

func (m *defaultGroupTasksModel) tableName() string {
	return m.table
}
